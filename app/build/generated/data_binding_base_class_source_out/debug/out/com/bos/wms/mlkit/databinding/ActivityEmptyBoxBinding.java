// Generated by view binder compiler. Do not edit!
package com.bos.wms.mlkit.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.bos.wms.mlkit.R;
import com.google.android.flexbox.FlexboxLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityEmptyBoxBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final FlexboxLayout confirmationButtons;

  @NonNull
  public final LinearLayout confirmationLayout;

  @NonNull
  public final TextView confirmationMessage;

  @NonNull
  public final Button confirmationNo;

  @NonNull
  public final Button confirmationYes;

  @NonNull
  public final ConstraintLayout emptyBoxActivityLayout;

  @NonNull
  public final FlexboxLayout flexboxLayout2;

  @NonNull
  public final EditText insertBinBoxBarcode;

  @NonNull
  public final TextView scanBinsHelpText;

  @NonNull
  public final TextView scanRFIDHelpText;

  @NonNull
  public final TextView scannedBoxBarcode;

  @NonNull
  public final Button scannedItem;

  @NonNull
  public final Button scannedItemsCount;

  private ActivityEmptyBoxBinding(@NonNull ConstraintLayout rootView,
      @NonNull FlexboxLayout confirmationButtons, @NonNull LinearLayout confirmationLayout,
      @NonNull TextView confirmationMessage, @NonNull Button confirmationNo,
      @NonNull Button confirmationYes, @NonNull ConstraintLayout emptyBoxActivityLayout,
      @NonNull FlexboxLayout flexboxLayout2, @NonNull EditText insertBinBoxBarcode,
      @NonNull TextView scanBinsHelpText, @NonNull TextView scanRFIDHelpText,
      @NonNull TextView scannedBoxBarcode, @NonNull Button scannedItem,
      @NonNull Button scannedItemsCount) {
    this.rootView = rootView;
    this.confirmationButtons = confirmationButtons;
    this.confirmationLayout = confirmationLayout;
    this.confirmationMessage = confirmationMessage;
    this.confirmationNo = confirmationNo;
    this.confirmationYes = confirmationYes;
    this.emptyBoxActivityLayout = emptyBoxActivityLayout;
    this.flexboxLayout2 = flexboxLayout2;
    this.insertBinBoxBarcode = insertBinBoxBarcode;
    this.scanBinsHelpText = scanBinsHelpText;
    this.scanRFIDHelpText = scanRFIDHelpText;
    this.scannedBoxBarcode = scannedBoxBarcode;
    this.scannedItem = scannedItem;
    this.scannedItemsCount = scannedItemsCount;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityEmptyBoxBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityEmptyBoxBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_empty_box, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityEmptyBoxBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.confirmationButtons;
      FlexboxLayout confirmationButtons = ViewBindings.findChildViewById(rootView, id);
      if (confirmationButtons == null) {
        break missingId;
      }

      id = R.id.confirmationLayout;
      LinearLayout confirmationLayout = ViewBindings.findChildViewById(rootView, id);
      if (confirmationLayout == null) {
        break missingId;
      }

      id = R.id.confirmationMessage;
      TextView confirmationMessage = ViewBindings.findChildViewById(rootView, id);
      if (confirmationMessage == null) {
        break missingId;
      }

      id = R.id.confirmationNo;
      Button confirmationNo = ViewBindings.findChildViewById(rootView, id);
      if (confirmationNo == null) {
        break missingId;
      }

      id = R.id.confirmationYes;
      Button confirmationYes = ViewBindings.findChildViewById(rootView, id);
      if (confirmationYes == null) {
        break missingId;
      }

      ConstraintLayout emptyBoxActivityLayout = (ConstraintLayout) rootView;

      id = R.id.flexboxLayout2;
      FlexboxLayout flexboxLayout2 = ViewBindings.findChildViewById(rootView, id);
      if (flexboxLayout2 == null) {
        break missingId;
      }

      id = R.id.insertBinBoxBarcode;
      EditText insertBinBoxBarcode = ViewBindings.findChildViewById(rootView, id);
      if (insertBinBoxBarcode == null) {
        break missingId;
      }

      id = R.id.scanBinsHelpText;
      TextView scanBinsHelpText = ViewBindings.findChildViewById(rootView, id);
      if (scanBinsHelpText == null) {
        break missingId;
      }

      id = R.id.scanRFIDHelpText;
      TextView scanRFIDHelpText = ViewBindings.findChildViewById(rootView, id);
      if (scanRFIDHelpText == null) {
        break missingId;
      }

      id = R.id.scannedBoxBarcode;
      TextView scannedBoxBarcode = ViewBindings.findChildViewById(rootView, id);
      if (scannedBoxBarcode == null) {
        break missingId;
      }

      id = R.id.scannedItem;
      Button scannedItem = ViewBindings.findChildViewById(rootView, id);
      if (scannedItem == null) {
        break missingId;
      }

      id = R.id.scannedItemsCount;
      Button scannedItemsCount = ViewBindings.findChildViewById(rootView, id);
      if (scannedItemsCount == null) {
        break missingId;
      }

      return new ActivityEmptyBoxBinding((ConstraintLayout) rootView, confirmationButtons,
          confirmationLayout, confirmationMessage, confirmationNo, confirmationYes,
          emptyBoxActivityLayout, flexboxLayout2, insertBinBoxBarcode, scanBinsHelpText,
          scanRFIDHelpText, scannedBoxBarcode, scannedItem, scannedItemsCount);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
