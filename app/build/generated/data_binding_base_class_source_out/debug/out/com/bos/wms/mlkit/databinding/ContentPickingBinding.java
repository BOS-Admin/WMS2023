// Generated by view binder compiler. Do not edit!
package com.bos.wms.mlkit.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import com.bos.wms.mlkit.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ContentPickingBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Button btnPickingDone;

  @NonNull
  public final TextView lblError;

  @NonNull
  public final TextView lblPickingBinBarcode;

  @NonNull
  public final LinearLayout lblPickingItemSerialBarcode;

  @NonNull
  public final TextView lblPickingListView;

  @NonNull
  public final TextView lblPickingRackBarcode;

  @NonNull
  public final TextView lblPickingRackRange;

  @NonNull
  public final TextView lblPickingReminaingBins;

  @NonNull
  public final TextView lblPickingReminaingItems;

  @NonNull
  public final TextView lblPickingWave;

  @NonNull
  public final LinearLayout linearLayout;

  @NonNull
  public final RecyclerView recyclerView;

  @NonNull
  public final TextView textView;

  @NonNull
  public final TextView textView6;

  @NonNull
  public final EditText txtPickingBinBarcode;

  @NonNull
  public final EditText txtPickingItemBarcode;

  @NonNull
  public final EditText txtPickingItemSerialBarcode;

  private ContentPickingBinding(@NonNull ConstraintLayout rootView, @NonNull Button btnPickingDone,
      @NonNull TextView lblError, @NonNull TextView lblPickingBinBarcode,
      @NonNull LinearLayout lblPickingItemSerialBarcode, @NonNull TextView lblPickingListView,
      @NonNull TextView lblPickingRackBarcode, @NonNull TextView lblPickingRackRange,
      @NonNull TextView lblPickingReminaingBins, @NonNull TextView lblPickingReminaingItems,
      @NonNull TextView lblPickingWave, @NonNull LinearLayout linearLayout,
      @NonNull RecyclerView recyclerView, @NonNull TextView textView, @NonNull TextView textView6,
      @NonNull EditText txtPickingBinBarcode, @NonNull EditText txtPickingItemBarcode,
      @NonNull EditText txtPickingItemSerialBarcode) {
    this.rootView = rootView;
    this.btnPickingDone = btnPickingDone;
    this.lblError = lblError;
    this.lblPickingBinBarcode = lblPickingBinBarcode;
    this.lblPickingItemSerialBarcode = lblPickingItemSerialBarcode;
    this.lblPickingListView = lblPickingListView;
    this.lblPickingRackBarcode = lblPickingRackBarcode;
    this.lblPickingRackRange = lblPickingRackRange;
    this.lblPickingReminaingBins = lblPickingReminaingBins;
    this.lblPickingReminaingItems = lblPickingReminaingItems;
    this.lblPickingWave = lblPickingWave;
    this.linearLayout = linearLayout;
    this.recyclerView = recyclerView;
    this.textView = textView;
    this.textView6 = textView6;
    this.txtPickingBinBarcode = txtPickingBinBarcode;
    this.txtPickingItemBarcode = txtPickingItemBarcode;
    this.txtPickingItemSerialBarcode = txtPickingItemSerialBarcode;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ContentPickingBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ContentPickingBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.content_picking, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ContentPickingBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnPickingDone;
      Button btnPickingDone = rootView.findViewById(id);
      if (btnPickingDone == null) {
        break missingId;
      }

      id = R.id.lblError;
      TextView lblError = rootView.findViewById(id);
      if (lblError == null) {
        break missingId;
      }

      id = R.id.lblPickingBinBarcode;
      TextView lblPickingBinBarcode = rootView.findViewById(id);
      if (lblPickingBinBarcode == null) {
        break missingId;
      }

      id = R.id.lblPickingItemSerialBarcode;
      LinearLayout lblPickingItemSerialBarcode = rootView.findViewById(id);
      if (lblPickingItemSerialBarcode == null) {
        break missingId;
      }

      id = R.id.lblPickingListView;
      TextView lblPickingListView = rootView.findViewById(id);
      if (lblPickingListView == null) {
        break missingId;
      }

      id = R.id.lblPickingRackBarcode;
      TextView lblPickingRackBarcode = rootView.findViewById(id);
      if (lblPickingRackBarcode == null) {
        break missingId;
      }

      id = R.id.lblPickingRackRange;
      TextView lblPickingRackRange = rootView.findViewById(id);
      if (lblPickingRackRange == null) {
        break missingId;
      }

      id = R.id.lblPickingReminaingBins;
      TextView lblPickingReminaingBins = rootView.findViewById(id);
      if (lblPickingReminaingBins == null) {
        break missingId;
      }

      id = R.id.lblPickingReminaingItems;
      TextView lblPickingReminaingItems = rootView.findViewById(id);
      if (lblPickingReminaingItems == null) {
        break missingId;
      }

      id = R.id.lblPickingWave;
      TextView lblPickingWave = rootView.findViewById(id);
      if (lblPickingWave == null) {
        break missingId;
      }

      id = R.id.linearLayout;
      LinearLayout linearLayout = rootView.findViewById(id);
      if (linearLayout == null) {
        break missingId;
      }

      id = R.id.recyclerView;
      RecyclerView recyclerView = rootView.findViewById(id);
      if (recyclerView == null) {
        break missingId;
      }

      id = R.id.textView;
      TextView textView = rootView.findViewById(id);
      if (textView == null) {
        break missingId;
      }

      id = R.id.textView6;
      TextView textView6 = rootView.findViewById(id);
      if (textView6 == null) {
        break missingId;
      }

      id = R.id.txtPickingBinBarcode;
      EditText txtPickingBinBarcode = rootView.findViewById(id);
      if (txtPickingBinBarcode == null) {
        break missingId;
      }

      id = R.id.txtPickingItemBarcode;
      EditText txtPickingItemBarcode = rootView.findViewById(id);
      if (txtPickingItemBarcode == null) {
        break missingId;
      }

      id = R.id.txtPickingItemSerialBarcode;
      EditText txtPickingItemSerialBarcode = rootView.findViewById(id);
      if (txtPickingItemSerialBarcode == null) {
        break missingId;
      }

      return new ContentPickingBinding((ConstraintLayout) rootView, btnPickingDone, lblError,
          lblPickingBinBarcode, lblPickingItemSerialBarcode, lblPickingListView,
          lblPickingRackBarcode, lblPickingRackRange, lblPickingReminaingBins,
          lblPickingReminaingItems, lblPickingWave, linearLayout, recyclerView, textView, textView6,
          txtPickingBinBarcode, txtPickingItemBarcode, txtPickingItemSerialBarcode);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
