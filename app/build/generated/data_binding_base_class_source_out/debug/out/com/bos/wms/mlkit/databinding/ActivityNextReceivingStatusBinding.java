// Generated by view binder compiler. Do not edit!
package com.bos.wms.mlkit.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import com.bos.wms.mlkit.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityNextReceivingStatusBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final TextView lblPickingRackBarcode;

  @NonNull
  public final LinearLayout linearLayout33;

  @NonNull
  public final TextView textView3;

  @NonNull
  public final EditText txtNextReceivingItemBarcode;

  @NonNull
  public final TextView txtNextReceivingStatus;

  private ActivityNextReceivingStatusBinding(@NonNull ConstraintLayout rootView,
      @NonNull TextView lblPickingRackBarcode, @NonNull LinearLayout linearLayout33,
      @NonNull TextView textView3, @NonNull EditText txtNextReceivingItemBarcode,
      @NonNull TextView txtNextReceivingStatus) {
    this.rootView = rootView;
    this.lblPickingRackBarcode = lblPickingRackBarcode;
    this.linearLayout33 = linearLayout33;
    this.textView3 = textView3;
    this.txtNextReceivingItemBarcode = txtNextReceivingItemBarcode;
    this.txtNextReceivingStatus = txtNextReceivingStatus;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityNextReceivingStatusBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityNextReceivingStatusBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_next_receiving_status, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityNextReceivingStatusBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.lblPickingRackBarcode;
      TextView lblPickingRackBarcode = rootView.findViewById(id);
      if (lblPickingRackBarcode == null) {
        break missingId;
      }

      id = R.id.linearLayout33;
      LinearLayout linearLayout33 = rootView.findViewById(id);
      if (linearLayout33 == null) {
        break missingId;
      }

      id = R.id.textView3;
      TextView textView3 = rootView.findViewById(id);
      if (textView3 == null) {
        break missingId;
      }

      id = R.id.txtNextReceivingItemBarcode;
      EditText txtNextReceivingItemBarcode = rootView.findViewById(id);
      if (txtNextReceivingItemBarcode == null) {
        break missingId;
      }

      id = R.id.txtNextReceivingStatus;
      TextView txtNextReceivingStatus = rootView.findViewById(id);
      if (txtNextReceivingStatus == null) {
        break missingId;
      }

      return new ActivityNextReceivingStatusBinding((ConstraintLayout) rootView,
          lblPickingRackBarcode, linearLayout33, textView3, txtNextReceivingItemBarcode,
          txtNextReceivingStatus);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
